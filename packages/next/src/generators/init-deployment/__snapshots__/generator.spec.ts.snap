// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`next deployment generator infrastructure should scaffold with infrastructure creates the deployment files: next-app/deploy/helm/nonprod/values.yaml 1`] = `
"# Non-Production values for next-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
fullnameOverride: next-app

image:
    repository: amidostacksnonprodeuwcore.azurecr.io/nx/next-app

ingress:
    hosts:
        - host: next-app.test.com
          paths:
              - path: /
                pathType: ImplementationSpecific
    tls:
        - hosts:
              - test.com

podAnnotations:
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure creates the deployment files: next-app/deploy/helm/prod/values.yaml 1`] = `
"# Production values for next-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
fullnameOverride: next-app

image:
    repository: amidostacksprodeuwcore.azurecr.io/nx/next-app

ingress:
    hosts:
        - host: next-app.test.dev
          paths:
              - path: /
                pathType: ImplementationSpecific
    tls:
        - hosts:
              - test.dev

podAnnotations:
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure creates the deployment files: next-app/deploy/terraform/.terraform.lock.hcl 1`] = `
"# This file is maintained automatically by "terraform init".
# Manual edits may be lost in future updates.

provider "registry.terraform.io/hashicorp/azurerm" {
  version     = "3.39.1"
  constraints = "~> 3.39.1"
  hashes = [
    "h1:/BnRqgu7EbPHe1OR15GbduV7Cd8rt+pqbGAj8CYTTXw=",
    "zh:0429544b1a1385ab396e4c7b23c74184f071fdd069c2a779f3523b692677fe9e",
    "zh:19a9857cbaa40613550667f30d8dd59ad88302f36aef3f04d784ac98681dfa15",
    "zh:505b830c31f9a78b087a07ba72d68696e27845164befabf2d57641c3ae007434",
    "zh:52942f003c1244c6f39d954618b01a02fac5f6cf104588bd7d7081a375b569d1",
    "zh:536ee1dab964f1358c6c42addb04e008a0d27022c88ae1972d7ed973546f9011",
    "zh:5aab6c071a7637f492b0d3500f743ea1fc01a2c8df0c8f583150b787a2d98f6e",
    "zh:69a645d631bcd31cb196ca96f46280d8af1ce6cc285b7e41c86c1bc868fd9cf6",
    "zh:70f05f9d71b73def03967cc24d437808ae8a3e46e17c466ea2b4559a55f0f45c",
    "zh:ace40e00fce5fb2e49b6ec747690c65eafa48e5b929d89b60f26b1dc8d835748",
    "zh:cf88e8e00851d8948a67790e4ecf70d1b0e1f8863e3ba8450428b75c111c521f",
    "zh:de9b4db5e5425fe1284faa9373ad7b4f0c169ee720144053b2f4a22f1310947a",
    "zh:f569b65999264a9416862bca5cd2a6177d94ccb0424f3a4ef424428912b9cb3c",
  ]
}
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure creates the deployment files: next-app/deploy/terraform/data.tf 1`] = `"data "azurerm_client_config" "current" {}"`;

exports[`next deployment generator infrastructure should scaffold with infrastructure creates the deployment files: next-app/deploy/terraform/variables/nonprod/dns.tfvars 1`] = `
"app_gateway_frontend_ip_name = "amido-stacks-nonprod-euw-core"
core_resource_group          = "amido-stacks-nonprod-euw-core"
dns_a_record_name            = "next-app"
dns_zone                     = "test.com"
dns_zone_rg                  = "%REPLACE%"
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure creates the deployment files: next-app/deploy/terraform/variables/prod/dns.tfvars 1`] = `
"app_gateway_frontend_ip_name = "amido-stacks-prod-euw-core"
core_resource_group          = "amido-stacks-prod-euw-core"
dns_a_record_name            = "next-app"
dns_zone                     = "test.dev"
dns_zone_rg                  = "%REPLACE%"
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure creates the deployment files: next-app/deploy/terraform/versions.tf 1`] = `
"terraform {
  backend "azurerm" {}
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>3.39.1"
    }
  }
}

provider "azurerm" {
  features {}
}
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure on a custom server: libs/stacks-helm-chart/build/helm/Chart.yaml 1`] = `
"apiVersion: v2
name: stacks-helm-chart
description: A Helm chart for Kubernetes

# A chart can be either an 'application' or a 'library' chart.
#
# Application charts are a collection of templates that can be packaged into versioned archives
# to be deployed.
#
# Library charts provide useful utilities or functions for the chart developer. They're included as
# a dependency of application charts to inject those utilities and functions into the rendering
# pipeline. Library charts do not define any templates and therefore cannot be deployed.
type: application

# This is the chart version. This version number should be incremented each time you make changes
# to the chart and its templates, including the app version.
# Versions are expected to follow Semantic Versioning (https://semver.org/)
version: 0.1.0
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure on a custom server: next-app/Dockerfile 1`] = `
"# Install dependencies only when needed
FROM docker.io/node:lts-alpine as deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine 
# to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat python3 make gcc g++
WORKDIR /usr/src/app
COPY dist/next-app/package*.json ./
RUN npm install --omit=dev

# Production image, copy all the files and run next
FROM docker.io/node:lts-alpine as runner
RUN apk add --no-cache dumb-init
ENV NODE_ENV production
ENV HOST 0.0.0.0
ENV PORT 3000
WORKDIR /usr/src/app
COPY --from=deps /usr/src/app/node_modules ./node_modules
COPY --from=deps /usr/src/app/package.json ./package.json
COPY dist/next-app/next.config.js ./next.config.js
COPY dist/next-app/public ./public

COPY dist/next-app/server ./server

COPY dist/next-app/.next ./.next
RUN chown -R node:node .
USER node
EXPOSE 3000
# COPY --chown=node:node ./tools/scripts/entrypoints/api.sh /usr/local/bin/docker-entrypoint.sh
# ENTRYPOINT [ "docker-entrypoint.sh" ]
# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
ENV NEXT_TELEMETRY_DISABLED 1

CMD ["dumb-init", "node", "server/main.js"]
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure on a custom server: next-app/deploy/helm/nonprod/values.yaml 1`] = `
"# Non-Production values for next-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
fullnameOverride: next-app

image:
    repository: amidostacksnonprodeuwcore.azurecr.io/nx/next-app

ingress:
    hosts:
        - host: next-app.test.com
          paths:
              - path: /
                pathType: ImplementationSpecific
    tls:
        - hosts:
              - test.com

podAnnotations:
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure on a custom server: next-app/deploy/helm/prod/values.yaml 1`] = `
"# Production values for next-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
fullnameOverride: next-app

image:
    repository: amidostacksprodeuwcore.azurecr.io/nx/next-app

ingress:
    hosts:
        - host: next-app.test.dev
          paths:
              - path: /
                pathType: ImplementationSpecific
    tls:
        - hosts:
              - test.dev

podAnnotations:
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure on a custom server: next-app/deploy/terraform/data.tf 1`] = `"data "azurerm_client_config" "current" {}"`;

exports[`next deployment generator infrastructure should scaffold with infrastructure on a custom server: next-app/deploy/terraform/versions.tf 1`] = `
"terraform {
  backend "azurerm" {}
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>3.39.1"
    }
  }
}

provider "azurerm" {
  features {}
}
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/.helmignore 1`] = `
"# Patterns to ignore when building packages.
# This supports shell glob matching, relative path matching, and
# negation (prefixed with !). Only one pattern per line.
.DS_Store
# Common VCS dirs
.git/
.gitignore
.bzr/
.bzrignore
.hg/
.hgignore
.svn/
# Common backup files
*.swp
*.bak
*.tmp
*.orig
*~
# Various IDEs
.project
.idea/
*.tmproj
.vscode/"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/Chart.yaml 1`] = `
"apiVersion: v2
name: stacks-helm-chart
description: A Helm chart for Kubernetes

# A chart can be either an 'application' or a 'library' chart.
#
# Application charts are a collection of templates that can be packaged into versioned archives
# to be deployed.
#
# Library charts provide useful utilities or functions for the chart developer. They're included as
# a dependency of application charts to inject those utilities and functions into the rendering
# pipeline. Library charts do not define any templates and therefore cannot be deployed.
type: application

# This is the chart version. This version number should be incremented each time you make changes
# to the chart and its templates, including the app version.
# Versions are expected to follow Semantic Versioning (https://semver.org/)
version: 0.1.0
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/charts/.gitkeep 1`] = `""`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/templates/_helpers.tpl 1`] = `
"{{/*
Expand the name of the chart.
*/}}
{{- define "stacks-helm-chart.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Create a default fully qualified app name.
We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
If release name contains chart name it will be used as a full name.
*/}}
{{- define "stacks-helm-chart.fullname" -}}
{{- if .Values.fullnameOverride }}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- $name := default .Chart.Name .Values.nameOverride }}
{{- if contains $name .Release.Name }}
{{- .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
{{- end }}
{{- end }}
{{- end }}

{{/*
Create chart name and version as used by the chart label.
*/}}
{{- define "stacks-helm-chart.chart" -}}
{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Common labels
*/}}
{{- define "stacks-helm-chart.labels" -}}
helm.sh/chart: {{ include "stacks-helm-chart.chart" . }}
{{ include "stacks-helm-chart.selectorLabels" . }}
{{- if .Chart.AppVersion }}
app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
{{- end }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- end }}

{{/*
Selector labels
*/}}
{{- define "stacks-helm-chart.selectorLabels" -}}
app.kubernetes.io/name: {{ include "stacks-helm-chart.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}

{{/*
Create the name of the service account to use
*/}}
{{- define "stacks-helm-chart.serviceAccountName" -}}
{{- if .Values.serviceAccount.create }}
{{- default (include "stacks-helm-chart.fullname" .) .Values.serviceAccount.name }}
{{- else }}
{{- default "default" .Values.serviceAccount.name }}
{{- end }}
{{- end }}
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/templates/NOTES.txt 1`] = `
"1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "next-custom-server.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "next-custom-server.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "next-custom-server.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "next-custom-server.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/templates/deployment.yaml 1`] = `
"apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "stacks-helm-chart.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "stacks-helm-chart.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "stacks-helm-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "stacks-helm-chart.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "stacks-helm-chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if .Values.env }}
          env:
            {{- range $key, $val := .Values.env }}
            - name: {{ $key }}
              value: {{ quote $val }}
            {{- end }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/templates/hpa.yaml 1`] = `
"{{- if .Values.autoscaling.enabled }}
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "stacks-helm-chart.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "stacks-helm-chart.labels" . | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "stacks-helm-chart.fullname" . }}
  minReplicas: {{ .Values.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.autoscaling.maxReplicas }}
  metrics:
    {{- if .Values.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
{{- end }}
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/templates/ingress.yaml 1`] = `
"{{- if .Values.ingress.enabled -}}
{{- $fullName := include "stacks-helm-chart.fullname" . -}}
{{- $svcPort := .Values.service.port -}}
{{- if and .Values.ingress.className (not (semverCompare ">=1.18-0" .Capabilities.KubeVersion.GitVersion)) }}
  {{- if not (hasKey .Values.ingress.annotations "kubernetes.io/ingress.class") }}
  {{- $_ := set .Values.ingress.annotations "kubernetes.io/ingress.class" .Values.ingress.className}}
  {{- end }}
{{- end }}
{{- if semverCompare ">=1.19-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1
{{- else if semverCompare ">=1.14-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1beta1
{{- else -}}
apiVersion: extensions/v1beta1
{{- end }}
kind: Ingress
metadata:
  name: {{ $fullName }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "stacks-helm-chart.labels" . | nindent 4 }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if and .Values.ingress.className (semverCompare ">=1.18-0" .Capabilities.KubeVersion.GitVersion) }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  {{- if .Values.ingress.tls }}
  tls:
    {{- range .Values.ingress.tls }}
    - hosts:
        {{- range .hosts }}
        - {{ . | quote }}
        {{- end }}
      secretName: {{ .secretName }}
    {{- end }}
  {{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            {{- if and .pathType (semverCompare ">=1.18-0" $.Capabilities.KubeVersion.GitVersion) }}
            pathType: {{ .pathType }}
            {{- end }}
            backend:
              {{- if semverCompare ">=1.19-0" $.Capabilities.KubeVersion.GitVersion }}
              service:
                name: {{ $fullName }}
                port:
                  number: {{ $svcPort }}
              {{- else }}
              serviceName: {{ $fullName }}
              servicePort: {{ $svcPort }}
              {{- end }}
          {{- end }}
    {{- end }}
{{- end }}
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/templates/service.yaml 1`] = `
"apiVersion: v1
kind: Service
metadata:
  name: {{ include "stacks-helm-chart.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels: {{- include "stacks-helm-chart.labels" . | nindent 4 }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "stacks-helm-chart.selectorLabels" . | nindent 4 }}
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/templates/serviceaccount.yaml 1`] = `
"{{- if .Values.serviceAccount.create -}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "stacks-helm-chart.serviceAccountName" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "stacks-helm-chart.labels" . | nindent 4 }}
    {{ toYaml .Values.serviceAccount.labels | nindent 4 }}
  {{- with .Values.serviceAccount.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/templates/tests/test-connection.yaml 1`] = `
"apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "stacks-helm-chart.fullname" . }}-test-connection"
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "stacks-helm-chart.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-rollback,post-upgrade,test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['{{ include "stacks-helm-chart.fullname" . }}:{{ .Values.service.port }}']
  restartPolicy: Never
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/build/helm/values.yaml 1`] = `
"# Default values for stacks-helm-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
namespace: nx

replicaCount: 1

image:
    # repository: nginx
    repository: ''
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ''

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    # annotations: {}
    annotations:
        azure.workload.identity/client-id: ''
        azure.workload.identity/tenant-id: ''
    labels:
        azure.workload.identity/use: 'false'
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ''

# fsGroup: 2000
podSecurityContext:
    {}

# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000
securityContext:
    {}

service:
    type: ClusterIP
    # port: 80
    port: 3000

ingress:
    enabled: true
    className: 'nginx'
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    annotations:
        {}
    hosts:
        # - host: chart-example.local
        - host: stacks-helm-chart.test.com
          paths:
              - path: /
                pathType: ImplementationSpecific
    # tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
    tls:
        - hosts:
              - test.com

# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi
resources:
    {}

autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    # targetMemoryUtilizationPercentage: 80
    targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
"
`;

exports[`next deployment generator infrastructure should scaffold with infrastructure should create the helm chart: libs/stacks-helm-chart/project.json 1`] = `
"{
    "name": "stacks-helm-chart",
    "$schema": "../../node_modules/nx/schemas/project-schema.json",
    "tags": [],
    "targets": {
        "version": {
            "executor": "@jscutlery/semver:version",
            "options": {
                "preset": "conventional",
                "trackDeps": true,
                "skipCommit": true,
                "dryRun": true,
                "skipRootChangelog": true,
                "skipProjectChangelog": true
            },
            "configurations": {
                "nonprod": {
                    "dryRun": false,
                    "noVerify": true,
                    "push": true,
                    "preid": "nonprod",
                    "releaseAs": "prerelease",
                    "postTargets": [
                        "stacks-helm-chart:helm-package",
                        "stacks-helm-chart:helm-push"
                    ]
                },
                "prod": {
                    "dryRun": false,
                    "noVerify": true,
                    "push": true,
                    "postTargets": [
                        "stacks-helm-chart:helm-package",
                        "stacks-helm-chart:helm-push:prod"
                    ]
                }
            }
        },
        "lint": {
            "executor": "nx:run-commands",
            "options": {
                "commands": [
                    {
                        "command": "helm lint",
                        "forwardAllArgs": false
                    }
                ],
                "cwd": "libs/stacks-helm-chart/build/helm"
            }
        },
        "helm-package": {
            "executor": "nx:run-commands",
            "options": {
                "commands": [
                    {
                        "command": "helm package build/helm --version \${version} -u -d dist",
                        "forwardAllArgs": false
                    }
                ],
                "cwd": "libs/stacks-helm-chart"
            }
        },
        "helm-push": {
            "executor": "nx:run-commands",
            "options": {
                "commands": [
                    {
                        "command": "helm push stacks-helm-chart-\${version}.tgz oci://amidostacksnonprodeuwcore.azurecr.io/helm",
                        "forwardAllArgs": false
                    }
                ],
                "cwd": "libs/stacks-helm-chart/dist"
            },
            "configurations": {
                "prod": {
                    "commands": [
                        {
                            "command": "helm push stacks-helm-chart-\${version}.tgz oci://amidostacksprodeuwcore.azurecr.io/helm",
                            "forwardAllArgs": false
                        }
                    ]
                }
            }
        }
    }
}
"
`;
