import { AuthConfig } from '@auth/core';
import { providerMap } from '../providers';
<% if(provider !== 'none') { %>
import { refreshToken } from '../actions';
import { isExpired, isOauthProvider } from '../utils';
<% } %>

type JWTCallback = NonNullable<AuthConfig['callbacks']>['jwt'];

export const jwt: JWTCallback = async ({ account, token, user }) => {
  if (account) {
<% if(guestSession && provider !== 'none') { %>
    if (account.provider === 'guest') {
      return {
        accountProviderId: account.providerAccountId,
        provider: account.provider as keyof typeof providerMap,
        user,
      };
    }
<% } %>

<% if(provider !== 'none') { %>
    return {
      access_token: account.access_token,
      refresh_token: account.refresh_token,
      expires_at: account.expires_at,
      accountProviderId: account.providerAccountId,
      provider: account.provider as keyof typeof providerMap,
      user,
    };
<% } else { %>
    return {
      accountProviderId: account.providerAccountId,
      provider: account.provider as keyof typeof providerMap,
      user,
    };
<% } %>
  }

<% if(provider !== 'none') { %>
  const provider = providerMap[token.provider];

  if (
    isOauthProvider(provider) &&
    token.refresh_token &&
    token.expires_at &&
    isExpired(token.expires_at)
  ) {
    try {
      const tokens = await refreshToken({
        token: token.refresh_token,
        config: provider.options,
      });

      return {
        ...token,
        access_token: tokens.access_token,
        expires_at: Math.floor(
          Date.now() / 1000 + (tokens.expires_in as number)
        ),
        refresh_token: tokens.refresh_token || token.refresh_token,
      };
    } catch (e) {
      return {
        ...token,
        error: 'RefreshTokenError',
      };
    }
  }
<% } %>

  return token;
};
