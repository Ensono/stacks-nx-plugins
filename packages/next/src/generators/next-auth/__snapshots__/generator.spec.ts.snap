// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`next-auth generator should appendto an existing list of providers 1`] = `
"import NextAuth from 'next-auth';
import AzureADProvider from \\"next-auth/providers/azure-ad\\";

const nextAuth = NextAuth({
  providers: [
    GithubProvider({}),
        AzureADProvider({
            clientId: process.env.AZURE_AD_CLIENT_ID,
            clientSecret: process.env.AZURE_AD_CLIENT_SECRET,
            tenantId: process.env.AZURE_AD_TENANT_ID,
        })
    ]
});
default export nextAuth;
"
`;

exports[`next-auth generator should configure app if pageProps is already destructured 1`] = `
"import { SessionProvider } from 'next-auth/react';

function CustomApp({
    Component,
    pageProps: { session, something, ...pageProperties },
}: AppProps) {
    return (
        <SessionProvider session={session}>
            <SomeProvider>
                <Component {...pageProperties} />
            </SomeProvider>
        </SessionProvider>
    );
}
export default CustomApp;
"
`;

exports[`next-auth generator should configure app if there are already wrapping react providers 1`] = `
"import { SessionProvider } from 'next-auth/react';

function SomeProvider({ children }: PropsWithChildren) {
    return <>{children}</>;
}
function CustomApp({
    Component,
    pageProps: { session, ...pageProps },
}: AppProps) {
    return (
        <SessionProvider session={session}>
            <SomeProvider>
                <Component {...pageProps} />
            </SomeProvider>
        </SessionProvider>
    );
}
export default CustomApp;
"
`;

exports[`next-auth generator should install NextAuth with a provider 1`] = `
"import NextAuth from 'next-auth';
import AzureADProvider from 'next-auth/providers/azure-ad';

const nextAuth = NextAuth({
    providers: [
        AzureADProvider({
            clientId: process.env.AZURE_AD_CLIENT_ID,
            clientSecret: process.env.AZURE_AD_CLIENT_SECRET,
            tenantId: process.env.AZURE_AD_TENANT_ID,
        }),
    ],
});

export default nextAuth;
"
`;

exports[`next-auth generator should install NextAuth without a provider 1`] = `
"import { SessionProvider } from 'next-auth/react';
import { AppProps } from 'next/app';
import Head from 'next/head';
import './styles.css';

function CustomApp({
    Component,
    pageProps: { session, ...pageProps },
}: AppProps) {
    return (
        <SessionProvider session={session}>
            <Head>
                <title>Welcome to next-app!</title>
            </Head>
            <main className=\\"app\\">
                <Component {...pageProps} />
            </main>
        </SessionProvider>
    );
}

export default CustomApp;
"
`;

exports[`next-auth generator should run on an existing NextAuth install with no providers 1`] = `
"import NextAuth from 'next-auth';
import AzureADProvider from \\"next-auth/providers/azure-ad\\";

const nextAuth = NextAuth({
    providers: [AzureADProvider({
        clientId: process.env.AZURE_AD_CLIENT_ID,
        clientSecret: process.env.AZURE_AD_CLIENT_SECRET,
        tenantId: process.env.AZURE_AD_TENANT_ID,
    })]
});
default export nextAuth;
"
`;

exports[`next-auth generator should safely run on an existing NextAuth install 1`] = `
"import NextAuth from 'next-auth';
import AzureADProvider from 'next-auth/providers/azure-ad';

const nextAuth = NextAuth({
    providers: [
        AzureADProvider({
            clientId: process.env.AZURE_AD_CLIENT_ID,
            clientSecret: process.env.AZURE_AD_CLIENT_SECRET,
            tenantId: process.env.AZURE_AD_TENANT_ID,
        }),
    ],
});

export default nextAuth;
"
`;
