// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`next-auth generator Library scaffolding should install auth library 1`] = `
"import NextAuth from 'next-auth';
import * as callbacks from './callbacks';

import { SESSION_MAX_AGE } from './config';




export const { handlers, signIn, signOut, auth } = NextAuth({
    session: {
        strategy: 'jwt',
        maxAge: SESSION_MAX_AGE,
    },
    providers: [],
    callbacks,
    
});
"
`;

exports[`next-auth generator guest session cookie matches callback snapshots 1`] = `
"import { AuthConfig } from '@auth/core';
import { providerMap } from '../providers';

import { refreshToken } from '../actions';
import { isExpired, isOauthProvider } from '../utils';


type JWTCallback = NonNullable<AuthConfig['callbacks']>['jwt'];

export const jwt: JWTCallback = async ({ account, token, user }) => {
  if (account) {

    if (account.provider === 'guest') {
      return {
        accountProviderId: account.providerAccountId,
        provider: account.provider as keyof typeof providerMap,
        user,
      };
    }



    return {
      access_token: account.access_token,
      refresh_token: account.refresh_token,
      expires_at: account.expires_at,
      accountProviderId: account.providerAccountId,
      provider: account.provider as keyof typeof providerMap,
      user,
    };

  }


  const provider = providerMap[token.provider];

  if (
    isOauthProvider(provider) &&
    token.refresh_token &&
    token.expires_at &&
    isExpired(token.expires_at)
  ) {
    try {
      const tokens = await refreshToken({
        token: token.refresh_token,
        config: provider.options,
      });

      return {
        ...token,
        access_token: tokens.access_token,
        expires_at: Math.floor(
          Date.now() / 1000 + (tokens.expires_in as number)
        ),
        refresh_token: tokens.refresh_token || token.refresh_token,
      };
    } catch (e) {
      return {
        ...token,
        error: 'RefreshTokenError',
      };
    }
  }


  return token;
};
"
`;

exports[`next-auth generator guest session cookie matches callback snapshots 2`] = `
"import { AuthConfig } from '@auth/core';
import { Session, User } from 'next-auth';

type SessionCallback = NonNullable<AuthConfig['callbacks']>['session'];

export const session: SessionCallback = async ({
  token,
  session: defaultSession,
}) => {
  const sessionDTO: Session = {
    ...defaultSession,
  };


  if (token && token.error) {
    return { ...sessionDTO, error: token.error };
  }

  if (token.user) {
    return {
      ...sessionDTO,
      user: token.user as User,
    };
  }

  return sessionDTO;
};
"
`;

exports[`next-auth generator guest session redis matches callback snapshots 1`] = `
"import { cookies } from 'next/headers';
import { AdapterSession } from '@auth/core/adapters';
import { AuthConfig } from '@auth/core';
import { providerMap } from '../providers';
import { adapter, repo } from '../adapter';

import { SESSION_MAX_AGE, GUEST_SESSION_COOKIE_NAME } from '../config';

type JWTCallback = NonNullable<AuthConfig['callbacks']>['jwt'];

export const jwt: JWTCallback = async ({
  account,
  token,
  trigger,
  session: update,
}) => {
  if (account) {
    const session = await repo.getSession(token.sub as string);
    let sessionUpdate: Omit<
      AdapterSession,
      'id' | 'sessionToken' | 'userId' | 'expires'
    > = {};

    
    const store = await cookies();
    const guestSessionKey = store.get(GUEST_SESSION_COOKIE_NAME)?.value;

    if (guestSessionKey && guestSessionKey !== token.sub) {
      const guestSession = await repo.getSession(guestSessionKey);

      if (guestSession) {
        const { userId, sessionToken, expires, id, ...data } = guestSession;

        sessionUpdate = data;
        await adapter.deleteSession(guestSessionKey);
      }
    }

    const sessionId = account.userId || (token.sub as string);
    if (!session) {
      await adapter.createSession({
        sessionToken: token.sub as string,
        userId: sessionId,
        expires: new Date(
          (account.expires_at ||
            Math.floor(Date.now() / 1000) + SESSION_MAX_AGE) * 1000
        ),
      });
    }

    await adapter.updateSession({
      sessionToken: token.sub as string,
      ...sessionUpdate,
    });
    
    if (account.provider === 'guest') {
      store.set(GUEST_SESSION_COOKIE_NAME, token.sub as string);
    } else {
      store.delete(GUEST_SESSION_COOKIE_NAME);
    }

    return {
      ...token,
      accountProviderId: account.providerAccountId,
      provider: account.provider as keyof typeof providerMap,
    };
  }

  if (trigger === 'update' && update) {
    await adapter.updateSession({ sessionToken: token.sub, ...update });
  }

  return token;
};
"
`;

exports[`next-auth generator guest session redis matches callback snapshots 2`] = `
"import { Account, Session, User } from 'next-auth';
import { AuthConfig } from '@auth/core';

import { repo } from '../adapter';
import { providerMap } from '../providers';
import { refreshToken } from '../actions';
import { isExpired, isOauthProvider } from '../utils';

type SessionCallback = NonNullable<AuthConfig['callbacks']>['session'];

export const session: SessionCallback = async ({
    token,
    session: defaultSession,
}) => {
    if (!token.sub) return defaultSession;

    const adapterSession = await repo.getSession(token.sub);

    if (!adapterSession) {
        return defaultSession;
    }
    
    if (token.provider === 'guest') {
        return {
            ...adapterSession,
            user: {
                role: 'guest',
              } as User,
        };
    }

    const user = (await repo.getUser(adapterSession.id)) || undefined;

    const sessionDTO: Session = {
        ...adapterSession,
        user,
    };


    const provider = providerMap[token.provider];
    if (isOauthProvider(provider)) {
        try {
            const account = await repo.getAccount(
                token.accountProviderId,
                token.provider,
            );

            if (!account) {
                return sessionDTO;
            }

            if (
                account.refresh_token &&
                account.expires_at &&
                isExpired(account.expires_at)
            ) {
                const tokens = await refreshToken({
                    token: account.refresh_token,
                    config: provider.options,
                });

                const accountKey = repo.getAccountId(
                    account.providerAccountId,
                    account.provider,
                );

                const updateAccount: Account = {
                    ...account,
                    access_token: tokens.access_token,
                    refresh_token:
                        tokens.refresh_token || account.refresh_token,
                    expires_at: tokens.expires_in
                        ? Math.floor(Date.now() / 1000) + tokens.expires_in
                        : undefined,
                };

                await repo.setAccount(accountKey, updateAccount);
            }
        } catch (error) {
            console.log('Error refreshing token', error);
            return {
                ...sessionDTO,
                error: 'RefreshTokenError',
            };
        }
    }


    return sessionDTO;
};
"
`;

exports[`next-auth generator providers auth0 creates the provider 1`] = `
"import Auth0 from 'next-auth/providers/auth0';
import { profile } from '../actions';

export const auth0 = Auth0({
    clientId: process.env.AUTH0_CLIENT_ID,
    clientSecret: process.env.AUTH0_CLIENT_SECRET,
    issuer: process.env.AUTH0_ISSUER,
    token: \`\${process.env.AUTH0_ISSUER}oauth/token\`,
    authorization: {
        params: {
            scope: 'openid profile email offline_access',
            audience: \`\${process.env.AUTH0_ISSUER}api/v2/\`,
        },
    },
    profile,
});
"
`;

exports[`next-auth generator providers auth0 creates the provider 2`] = `
"import { auth0 } from "./auth0";

export const providerMap = {
    auth0
};
"
`;

exports[`next-auth generator providers microsoft-entra-id creates the provider 1`] = `
"import EntraId from 'next-auth/providers/microsoft-entra-id';
import { profile } from '../actions';

export const microsoftEntraId = EntraId({
    clientId: process.env.AZURE_AD_CLIENT_ID as string,
    clientSecret: process.env.AZURE_AD_CLIENT_SECRET as string,
    tenantId: process.env.AZURE_AD_TENANT_ID as string,
    token: \`https://login.microsoftonline.com/\${process.env.AZURE_AD_TENANT_ID}/oauth2/v2.0/token\`,
    authorization: {
        params: {
            scope: 'openid profile email offline_access User.Read',
        },
    },
    profile,
});
"
`;

exports[`next-auth generator providers microsoft-entra-id creates the provider 2`] = `
"import { microsoftEntraId } from "./microsoft-entra-id";

export const providerMap = {
    'microsoft-entra-id': microsoftEntraId
};
"
`;

exports[`next-auth generator sessionStorage cookies should match expected callbacks 1`] = `
"import { AuthConfig } from '@auth/core';
import { providerMap } from '../providers';


type JWTCallback = NonNullable<AuthConfig['callbacks']>['jwt'];

export const jwt: JWTCallback = async ({ account, token, user }) => {
  if (account) {



    return {
      accountProviderId: account.providerAccountId,
      provider: account.provider as keyof typeof providerMap,
      user,
    };

  }



  return token;
};
"
`;

exports[`next-auth generator sessionStorage cookies should match expected callbacks 2`] = `
"import { AuthConfig } from '@auth/core';
import { Session, User } from 'next-auth';

type SessionCallback = NonNullable<AuthConfig['callbacks']>['session'];

export const session: SessionCallback = async ({
  token,
  session: defaultSession,
}) => {
  const sessionDTO: Session = {
    ...defaultSession,
  };


  if (token.user) {
    return {
      ...sessionDTO,
      user: token.user as User,
    };
  }

  return sessionDTO;
};
"
`;

exports[`next-auth generator sessionStorage redis should match expected callbacks 1`] = `
"
import { AdapterSession } from '@auth/core/adapters';
import { AuthConfig } from '@auth/core';
import { providerMap } from '../providers';
import { adapter, repo } from '../adapter';

import { SESSION_MAX_AGE } from '../config';

type JWTCallback = NonNullable<AuthConfig['callbacks']>['jwt'];

export const jwt: JWTCallback = async ({
  account,
  token,
  trigger,
  session: update,
}) => {
  if (account) {
    const session = await repo.getSession(token.sub as string);
    let sessionUpdate: Omit<
      AdapterSession,
      'id' | 'sessionToken' | 'userId' | 'expires'
    > = {};

    

    const sessionId = account.userId || (token.sub as string);
    if (!session) {
      await adapter.createSession({
        sessionToken: token.sub as string,
        userId: sessionId,
        expires: new Date(
          (account.expires_at ||
            Math.floor(Date.now() / 1000) + SESSION_MAX_AGE) * 1000
        ),
      });
    }

    await adapter.updateSession({
      sessionToken: token.sub as string,
      ...sessionUpdate,
    });
    

    return {
      ...token,
      accountProviderId: account.providerAccountId,
      provider: account.provider as keyof typeof providerMap,
    };
  }

  if (trigger === 'update' && update) {
    await adapter.updateSession({ sessionToken: token.sub, ...update });
  }

  return token;
};
"
`;

exports[`next-auth generator sessionStorage redis should match expected callbacks 2`] = `
"import { Session } from 'next-auth';
import { AuthConfig } from '@auth/core';

import { repo } from '../adapter';


type SessionCallback = NonNullable<AuthConfig['callbacks']>['session'];

export const session: SessionCallback = async ({
    token,
    session: defaultSession,
}) => {
    if (!token.sub) return defaultSession;

    const adapterSession = await repo.getSession(token.sub);

    if (!adapterSession) {
        return defaultSession;
    }
    
    const user = (await repo.getUser(adapterSession.id)) || undefined;

    const sessionDTO: Session = {
        ...adapterSession,
        user,
    };



    return sessionDTO;
};
"
`;
