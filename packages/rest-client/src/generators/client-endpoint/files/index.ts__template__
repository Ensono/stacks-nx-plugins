import httpClient from '<%= httpClient %>';
import { <%= className %> } from '<%= httpClient %>;'

import { <%= className %> } from './index.types';

const API_ENDPOINT = process.env.<%= envVar %>/<%= name %>/<%= endpointVersion %>;

<% if (methods.includes('get')) { %>
export const get<%= className %> = async (config): Response<<%= className %>> => 
    await httpClient.get(API_ENDPOINT, { config })
<% } %>

<% if (methods.includes('delete')) { %>
export const delete<%= className %> = async (config): Response<<%= className %>> => 
    await httpClient.delete(API_ENDPOINT, config)
<% } %>

<% if (methods.includes('head')) { %>
export const head<%= className %> = async (config): Response<<%= className %>> => 
    await httpClient.head(API_ENDPOINT, config)
<% } %>

<% if (methods.includes('options')) { %>
export const options<%= className %> = async (config): Response<<%= className %>> => 
    await httpClient.options(API_ENDPOINT, config)
<% } %>

<% if (methods.includes('post')) { %>
export const post<%= className %> = async (data, config): Response<<%= className %>> => 
    await httpClient.post(API_ENDPOINT, data, { config })
<% } %>

<% if (methods.includes('put')) { %>
export const put<%= className %> = async (data, config): Response<<%= className %>> => 
    await httpClient.put(API_ENDPOINT, data, config)
<% } %>

<% if (methods.includes('patch')) { %>
export const patch<%= className %> = async (data, params): Response<<%= className %>> => 
    await httpClient.patch(API_ENDPOINT, data, config)
<% } %>