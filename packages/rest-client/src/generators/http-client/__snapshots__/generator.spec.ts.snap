// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`http-client generator should generate the http-client with custom directory: .prettierignore 1`] = `
"# Add files here to ignore them from prettier formatting
/dist
/coverage"
`;

exports[`http-client generator should generate the http-client with custom directory: .prettierrc 1`] = `
"{ "singleQuote": true }
"
`;

exports[`http-client generator should generate the http-client with custom directory: custom/test-client/.eslintrc.json 1`] = `
"{
  "extends": ["../../.eslintrc.json"],
  "ignorePatterns": ["!**/*"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {}
    },
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {}
    },
    {
      "files": ["*.js", "*.jsx"],
      "rules": {}
    }
  ]
}
"
`;

exports[`http-client generator should generate the http-client with custom directory: custom/test-client/README.md 1`] = `
"# custom-test-client

This library was generated with [Nx](https://nx.dev).

## Building

Run \`nx build custom-test-client\` to build the library.

## Running unit tests

Run \`nx test custom-test-client\` to execute the unit tests via [Jest](https://jestjs.io).
"
`;

exports[`http-client generator should generate the http-client with custom directory: custom/test-client/jest.config.ts 1`] = `
"export default {
  displayName: 'custom-test-client',
  preset: '../../jest.preset.js',
  transform: {
    '^.+\\\\.[tj]s$': ['ts-jest', { tsconfig: '<rootDir>/tsconfig.spec.json' }],
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../../coverage/custom/test-client',
};
"
`;

exports[`http-client generator should generate the http-client with custom directory: custom/test-client/package.json 1`] = `
"{
  "name": "@proj/custom/test-client",
  "version": "0.0.1",
  "type": "commonjs"
}
"
`;

exports[`http-client generator should generate the http-client with custom directory: custom/test-client/project.json 1`] = `
"{
  "name": "custom-test-client",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "custom/test-client/src",
  "projectType": "library",
  "targets": {
    "build": {
      "executor": "@nx/js:tsc",
      "outputs": ["{options.outputPath}"],
      "options": {
        "outputPath": "dist/custom/test-client",
        "main": "custom/test-client/src/index.ts",
        "tsConfig": "custom/test-client/tsconfig.lib.json",
        "assets": ["custom/test-client/*.md"]
      }
    },
    "lint": {
      "executor": "@nx/linter:eslint",
      "outputs": ["{options.outputFile}"],
      "options": {
        "lintFilePatterns": ["custom/test-client/**/*.ts"]
      }
    },
    "test": {
      "executor": "@nx/jest:jest",
      "outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
      "options": {
        "jestConfig": "custom/test-client/jest.config.ts",
        "passWithNoTests": true
      },
      "configurations": {
        "ci": {
          "ci": true,
          "codeCoverage": true,
          "collectCoverage": true,
          "coverageReporters": ["text", "html"],
          "collectCoverageFrom": [
            "./**/*.{js,jsx,ts,tsx}",
            "./!**/.next/**",
            "./!**/*.d.ts",
            "./!**/*.config.*",
            "./!**/_app.*"
          ]
        }
      }
    }
  },
  "tags": ["test", "client"]
}
"
`;

exports[`http-client generator should generate the http-client with custom directory: custom/test-client/src/index.test.ts 1`] = `
"import httpClient from '.';

describe('axios', () => {
  it('should be an axios instance', () => {
    expect(httpClient).toBeDefined();
    expect(httpClient).toHaveProperty('get');
    expect(httpClient).toHaveProperty('post');
  });
});
"
`;

exports[`http-client generator should generate the http-client with custom directory: custom/test-client/src/index.ts 1`] = `
"import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';

// Reusable instance
const httpClient = axios.create();

export type RequestConfig<T = any> = AxiosRequestConfig<T>;
export type Response<T = any> = AxiosResponse<T>;

export default httpClient;
"
`;

exports[`http-client generator should generate the http-client with custom directory: custom/test-client/tsconfig.json 1`] = `
"{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "module": "commonjs"
  },
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.lib.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ]
}
"
`;

exports[`http-client generator should generate the http-client with custom directory: custom/test-client/tsconfig.lib.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../../dist/out-tsc",
    "declaration": true,
    "types": ["node"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]
}
"
`;

exports[`http-client generator should generate the http-client with custom directory: custom/test-client/tsconfig.spec.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../../dist/out-tsc",
    "module": "commonjs",
    "types": ["jest", "node"]
  },
  "include": [
    "jest.config.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
"
`;

exports[`http-client generator should generate the http-client with custom directory: jest.config.ts 1`] = `
"import { getJestProjects } from '@nx/jest';

export default {
  projects: getJestProjects(),
};
"
`;

exports[`http-client generator should generate the http-client with custom directory: jest.preset.js 1`] = `
"const nxPreset = require('@nx/jest/preset').default;

module.exports = { ...nxPreset };
"
`;

exports[`http-client generator should generate the http-client with custom import path: .prettierignore 1`] = `
"# Add files here to ignore them from prettier formatting
/dist
/coverage"
`;

exports[`http-client generator should generate the http-client with custom import path: .prettierrc 1`] = `
"{ "singleQuote": true }
"
`;

exports[`http-client generator should generate the http-client with custom import path: jest.config.ts 1`] = `
"import { getJestProjects } from '@nx/jest';

export default {
  projects: getJestProjects(),
};
"
`;

exports[`http-client generator should generate the http-client with custom import path: jest.preset.js 1`] = `
"const nxPreset = require('@nx/jest/preset').default;

module.exports = { ...nxPreset };
"
`;

exports[`http-client generator should generate the http-client with custom import path: test-client/.eslintrc.json 1`] = `
"{
  "extends": ["../.eslintrc.json"],
  "ignorePatterns": ["!**/*"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {}
    },
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {}
    },
    {
      "files": ["*.js", "*.jsx"],
      "rules": {}
    }
  ]
}
"
`;

exports[`http-client generator should generate the http-client with custom import path: test-client/README.md 1`] = `
"# test-client

This library was generated with [Nx](https://nx.dev).

## Building

Run \`nx build test-client\` to build the library.

## Running unit tests

Run \`nx test test-client\` to execute the unit tests via [Jest](https://jestjs.io).
"
`;

exports[`http-client generator should generate the http-client with custom import path: test-client/jest.config.ts 1`] = `
"export default {
  displayName: 'test-client',
  preset: '../jest.preset.js',
  transform: {
    '^.+\\\\.[tj]s$': ['ts-jest', { tsconfig: '<rootDir>/tsconfig.spec.json' }],
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/test-client',
};
"
`;

exports[`http-client generator should generate the http-client with custom import path: test-client/package.json 1`] = `
"{
  "name": "@customimport/restclient",
  "version": "0.0.1",
  "type": "commonjs"
}
"
`;

exports[`http-client generator should generate the http-client with custom import path: test-client/project.json 1`] = `
"{
  "name": "test-client",
  "$schema": "../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "test-client/src",
  "projectType": "library",
  "targets": {
    "build": {
      "executor": "@nx/js:tsc",
      "outputs": ["{options.outputPath}"],
      "options": {
        "outputPath": "dist/test-client",
        "main": "test-client/src/index.ts",
        "tsConfig": "test-client/tsconfig.lib.json",
        "assets": ["test-client/*.md"]
      }
    },
    "lint": {
      "executor": "@nx/linter:eslint",
      "outputs": ["{options.outputFile}"],
      "options": {
        "lintFilePatterns": ["test-client/**/*.ts"]
      }
    },
    "test": {
      "executor": "@nx/jest:jest",
      "outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
      "options": {
        "jestConfig": "test-client/jest.config.ts",
        "passWithNoTests": true
      },
      "configurations": {
        "ci": {
          "ci": true,
          "codeCoverage": true,
          "collectCoverage": true,
          "coverageReporters": ["text", "html"],
          "collectCoverageFrom": [
            "./**/*.{js,jsx,ts,tsx}",
            "./!**/.next/**",
            "./!**/*.d.ts",
            "./!**/*.config.*",
            "./!**/_app.*"
          ]
        }
      }
    }
  },
  "tags": []
}
"
`;

exports[`http-client generator should generate the http-client with custom import path: test-client/src/index.test.ts 1`] = `
"import httpClient from '.';

describe('axios', () => {
  it('should be an axios instance', () => {
    expect(httpClient).toBeDefined();
    expect(httpClient).toHaveProperty('get');
    expect(httpClient).toHaveProperty('post');
  });
});
"
`;

exports[`http-client generator should generate the http-client with custom import path: test-client/src/index.ts 1`] = `
"import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';

// Reusable instance
const httpClient = axios.create();

export type RequestConfig<T = any> = AxiosRequestConfig<T>;
export type Response<T = any> = AxiosResponse<T>;

export default httpClient;
"
`;

exports[`http-client generator should generate the http-client with custom import path: test-client/tsconfig.json 1`] = `
"{
  "extends": "../tsconfig.base.json",
  "compilerOptions": {
    "module": "commonjs"
  },
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.lib.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ]
}
"
`;

exports[`http-client generator should generate the http-client with custom import path: test-client/tsconfig.lib.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "declaration": true,
    "types": ["node"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]
}
"
`;

exports[`http-client generator should generate the http-client with custom import path: test-client/tsconfig.spec.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "module": "commonjs",
    "types": ["jest", "node"]
  },
  "include": [
    "jest.config.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
"
`;

exports[`http-client generator should generate the http-client with no formatting: .prettierignore 1`] = `
"# Add files here to ignore them from prettier formatting
/dist
/coverage"
`;

exports[`http-client generator should generate the http-client with no formatting: .prettierrc 1`] = `"{"singleQuote":true}"`;

exports[`http-client generator should generate the http-client with no formatting: jest.config.ts 1`] = `
"import { getJestProjects } from '@nx/jest';

export default {
projects: getJestProjects()
};"
`;

exports[`http-client generator should generate the http-client with no formatting: jest.preset.js 1`] = `
"const nxPreset = require('@nx/jest/preset').default;

      module.exports = { ...nxPreset }"
`;

exports[`http-client generator should generate the http-client with no formatting: test-client/.eslintrc.json 1`] = `
"{
  "extends": [
    "../.eslintrc.json"
  ],
  "ignorePatterns": [
    "!**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts",
        "*.tsx",
        "*.js",
        "*.jsx"
      ],
      "rules": {}
    },
    {
      "files": [
        "*.ts",
        "*.tsx"
      ],
      "rules": {}
    },
    {
      "files": [
        "*.js",
        "*.jsx"
      ],
      "rules": {}
    }
  ]
}
"
`;

exports[`http-client generator should generate the http-client with no formatting: test-client/README.md 1`] = `
"# test-client

This library was generated with [Nx](https://nx.dev).



## Building

Run \`nx build test-client\` to build the library.





## Running unit tests

Run \`nx test test-client\` to execute the unit tests via [Jest](https://jestjs.io).


"
`;

exports[`http-client generator should generate the http-client with no formatting: test-client/jest.config.ts 1`] = `
"export default {
  displayName: 'test-client',
  preset: '../jest.preset.js',
  transform: {
    '^.+\\\\.[tj]s$': ['ts-jest', { tsconfig: '<rootDir>/tsconfig.spec.json' }]
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/test-client'
};
"
`;

exports[`http-client generator should generate the http-client with no formatting: test-client/package.json 1`] = `
"{
  "name": "@proj/test-client",
  "version": "0.0.1",
  "type": "commonjs"
}
"
`;

exports[`http-client generator should generate the http-client with no formatting: test-client/project.json 1`] = `
"{
  "name": "test-client",
  "$schema": "../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "test-client/src",
  "projectType": "library",
  "targets": {
    "build": {
      "executor": "@nx/js:tsc",
      "outputs": [
        "{options.outputPath}"
      ],
      "options": {
        "outputPath": "dist/test-client",
        "main": "test-client/src/index.ts",
        "tsConfig": "test-client/tsconfig.lib.json",
        "assets": [
          "test-client/*.md"
        ]
      }
    },
    "lint": {
      "executor": "@nx/linter:eslint",
      "outputs": [
        "{options.outputFile}"
      ],
      "options": {
        "lintFilePatterns": [
          "test-client/**/*.ts"
        ]
      }
    },
    "test": {
      "executor": "@nx/jest:jest",
      "outputs": [
        "{workspaceRoot}/coverage/{projectRoot}"
      ],
      "options": {
        "jestConfig": "test-client/jest.config.ts",
        "passWithNoTests": true
      },
      "configurations": {
        "ci": {
          "ci": true,
          "codeCoverage": true,
          "collectCoverage": true,
          "coverageReporters": [
            "text",
            "html"
          ],
          "collectCoverageFrom": [
            "./**/*.{js,jsx,ts,tsx}",
            "./!**/.next/**",
            "./!**/*.d.ts",
            "./!**/*.config.*",
            "./!**/_app.*"
          ]
        }
      }
    }
  },
  "tags": []
}
"
`;

exports[`http-client generator should generate the http-client with no formatting: test-client/src/index.test.ts 1`] = `
"import httpClient from '.';

describe('axios', () => {
  it('should be an axios instance', () => {
    expect(httpClient).toBeDefined();
    expect(httpClient).toHaveProperty('get');
    expect(httpClient).toHaveProperty('post');
  });
});"
`;

exports[`http-client generator should generate the http-client with no formatting: test-client/src/index.ts 1`] = `
"import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';

// Reusable instance
const httpClient = axios.create();

export type RequestConfig<T = any> = AxiosRequestConfig<T>;
export type Response<T = any> = AxiosResponse<T>;

export default httpClient;
"
`;

exports[`http-client generator should generate the http-client with no formatting: test-client/tsconfig.json 1`] = `
"{
  "extends": "../tsconfig.base.json",
  "compilerOptions": {
    "module": "commonjs"
  },
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.lib.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ]
}
"
`;

exports[`http-client generator should generate the http-client with no formatting: test-client/tsconfig.lib.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "declaration": true,
    "types": ["node"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]
}
"
`;

exports[`http-client generator should generate the http-client with no formatting: test-client/tsconfig.spec.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "module": "commonjs",
    "types": ["jest", "node"]
  },
  "include": [
    "jest.config.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
"
`;

exports[`http-client generator should generate the http-client: .prettierignore 1`] = `
"# Add files here to ignore them from prettier formatting
/dist
/coverage"
`;

exports[`http-client generator should generate the http-client: .prettierrc 1`] = `
"{ "singleQuote": true }
"
`;

exports[`http-client generator should generate the http-client: jest.config.ts 1`] = `
"import { getJestProjects } from '@nx/jest';

export default {
  projects: getJestProjects(),
};
"
`;

exports[`http-client generator should generate the http-client: jest.preset.js 1`] = `
"const nxPreset = require('@nx/jest/preset').default;

module.exports = { ...nxPreset };
"
`;

exports[`http-client generator should generate the http-client: test-client/.eslintrc.json 1`] = `
"{
  "extends": ["../.eslintrc.json"],
  "ignorePatterns": ["!**/*"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {}
    },
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {}
    },
    {
      "files": ["*.js", "*.jsx"],
      "rules": {}
    }
  ]
}
"
`;

exports[`http-client generator should generate the http-client: test-client/README.md 1`] = `
"# test-client

This library was generated with [Nx](https://nx.dev).

## Building

Run \`nx build test-client\` to build the library.

## Running unit tests

Run \`nx test test-client\` to execute the unit tests via [Jest](https://jestjs.io).
"
`;

exports[`http-client generator should generate the http-client: test-client/jest.config.ts 1`] = `
"export default {
  displayName: 'test-client',
  preset: '../jest.preset.js',
  transform: {
    '^.+\\\\.[tj]s$': ['ts-jest', { tsconfig: '<rootDir>/tsconfig.spec.json' }],
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/test-client',
};
"
`;

exports[`http-client generator should generate the http-client: test-client/package.json 1`] = `
"{
  "name": "@proj/test-client",
  "version": "0.0.1",
  "type": "commonjs"
}
"
`;

exports[`http-client generator should generate the http-client: test-client/project.json 1`] = `
"{
  "name": "test-client",
  "$schema": "../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "test-client/src",
  "projectType": "library",
  "targets": {
    "build": {
      "executor": "@nx/js:tsc",
      "outputs": ["{options.outputPath}"],
      "options": {
        "outputPath": "dist/test-client",
        "main": "test-client/src/index.ts",
        "tsConfig": "test-client/tsconfig.lib.json",
        "assets": ["test-client/*.md"]
      }
    },
    "lint": {
      "executor": "@nx/linter:eslint",
      "outputs": ["{options.outputFile}"],
      "options": {
        "lintFilePatterns": ["test-client/**/*.ts"]
      }
    },
    "test": {
      "executor": "@nx/jest:jest",
      "outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
      "options": {
        "jestConfig": "test-client/jest.config.ts",
        "passWithNoTests": true
      },
      "configurations": {
        "ci": {
          "ci": true,
          "codeCoverage": true,
          "collectCoverage": true,
          "coverageReporters": ["text", "html"],
          "collectCoverageFrom": [
            "./**/*.{js,jsx,ts,tsx}",
            "./!**/.next/**",
            "./!**/*.d.ts",
            "./!**/*.config.*",
            "./!**/_app.*"
          ]
        }
      }
    }
  },
  "tags": ["test", "client"]
}
"
`;

exports[`http-client generator should generate the http-client: test-client/src/index.test.ts 1`] = `
"import httpClient from '.';

describe('axios', () => {
  it('should be an axios instance', () => {
    expect(httpClient).toBeDefined();
    expect(httpClient).toHaveProperty('get');
    expect(httpClient).toHaveProperty('post');
  });
});
"
`;

exports[`http-client generator should generate the http-client: test-client/src/index.ts 1`] = `
"import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';

// Reusable instance
const httpClient = axios.create();

export type RequestConfig<T = any> = AxiosRequestConfig<T>;
export type Response<T = any> = AxiosResponse<T>;

export default httpClient;
"
`;

exports[`http-client generator should generate the http-client: test-client/tsconfig.json 1`] = `
"{
  "extends": "../tsconfig.base.json",
  "compilerOptions": {
    "module": "commonjs"
  },
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.lib.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ]
}
"
`;

exports[`http-client generator should generate the http-client: test-client/tsconfig.lib.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "declaration": true,
    "types": ["node"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]
}
"
`;

exports[`http-client generator should generate the http-client: test-client/tsconfig.spec.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "module": "commonjs",
    "types": ["jest", "node"]
  },
  "include": [
    "jest.config.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
"
`;
