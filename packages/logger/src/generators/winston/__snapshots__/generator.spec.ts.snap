// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`logger generator should generate the logger: .prettierignore 1`] = `
"# Add files here to ignore them from prettier formatting
/dist
/coverage
/.nx/cache
/.nx/workspace-data"
`;

exports[`logger generator should generate the logger: .prettierrc 1`] = `
"{ "singleQuote": true }
"
`;

exports[`logger generator should generate the logger: custom/test-logger/.eslintrc.json 1`] = `
"{
  "ignorePatterns": ["!**/*"],
  "env": {
    "jest": true
  },
  "extends": ["../../.eslintrc.json", "plugin:testing-library/react"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@typescript-eslint/no-floating-promises": "error",
        "testing-library/await-async-utils": "error",
        "testing-library/await-async-queries": "error",
        "testing-library/no-wait-for-side-effects": "error",
        "testing-library/no-manual-cleanup": "error",
        "testing-library/prefer-explicit-assert": "warn",
        "testing-library/prefer-presence-queries": "warn",
        "testing-library/prefer-user-event": "warn",
        "testing-library/no-debug": "off"
      },
      "excludedFiles": ["jest.config.ts"],
      "parserOptions": {
        "project": ["tsconfig(.*)?.json"]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {}
    },
    {
      "files": ["*.js", "*.jsx"],
      "rules": {}
    },
    {
      "files": ["*.json"],
      "parser": "jsonc-eslint-parser",
      "rules": {
        "@nx/dependency-checks": [
          "error",
          {
            "ignoredFiles": [
              "{projectRoot}/eslint.config.{js,cjs,mjs,ts,cts,mts}"
            ]
          }
        ]
      }
    },
    {
      "files": "jest.config.ts",
      "rules": {
        "unicorn/no-abusive-eslint-disable": "off"
      }
    }
  ]
}
"
`;

exports[`logger generator should generate the logger: custom/test-logger/jest.config.ts 1`] = `
"export default {
  displayName: 'test-logger',
  preset: '../../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\.[tj]s$': ['ts-jest', { tsconfig: '<rootDir>/tsconfig.spec.json' }],
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../../coverage/custom/test-logger',
};
"
`;

exports[`logger generator should generate the logger: custom/test-logger/package.json 1`] = `
"{
  "name": "@proj/test-logger",
  "version": "0.0.1",
  "private": true,
  "type": "commonjs",
  "main": "./src/index.js",
  "types": "./src/index.d.ts",
  "dependencies": {
    "tslib": "^2.3.0"
  }
}
"
`;

exports[`logger generator should generate the logger: custom/test-logger/project.json 1`] = `
"{
  "name": "test-logger",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "custom/test-logger/src",
  "projectType": "library",
  "tags": ["test", "logger"],
  "targets": {
    "build": {
      "executor": "@nx/js:tsc",
      "outputs": ["{options.outputPath}"],
      "options": {
        "outputPath": "dist/custom/test-logger",
        "main": "custom/test-logger/src/index.ts",
        "tsConfig": "custom/test-logger/tsconfig.lib.json",
        "assets": ["custom/test-logger/*.md"]
      }
    },
    "lint": {
      "executor": "@nx/eslint:lint"
    },
    "test": {
      "executor": "@nx/jest:jest",
      "outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
      "options": {
        "jestConfig": "custom/test-logger/jest.config.ts"
      },
      "configurations": {
        "ci": {
          "collectCoverage": true,
          "coverageReporters": ["text", "html"],
          "collectCoverageFrom": ["./**/*.{js,jsx,ts,tsx}", "./!**/*.config.*"],
          "codeCoverage": true,
          "ci": true
        }
      }
    }
  }
}
"
`;

exports[`logger generator should generate the logger: custom/test-logger/src/index.test.ts 1`] = `
"import logger from '.';

describe('logger', () => {
  it('should be a winston logger instance', () => {
    expect(logger).toBeDefined();

    expect(logger).toHaveProperty('error');
    expect(logger).toHaveProperty('warn');
    expect(logger).toHaveProperty('info');
    expect(logger).toHaveProperty('verbose');
    expect(logger).toHaveProperty('debug');
    expect(logger).toHaveProperty('silly');
  });
});
"
`;

exports[`logger generator should generate the logger: custom/test-logger/src/index.ts 1`] = `
"import * as winston from 'winston';

const logConfiguration: winston.LoggerOptions = {
  level: 'debug',
  levels: winston.config.npm.levels,
};

if (process.env.NODE_ENV === 'production') {
  logConfiguration.level = 'info';
}

// Reusable winston logging instance
const logger = winston.createLogger(logConfiguration);

export default logger;
"
`;

exports[`logger generator should generate the logger: custom/test-logger/tsconfig.json 1`] = `
"{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "module": "commonjs"
  },
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.lib.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ]
}
"
`;

exports[`logger generator should generate the logger: custom/test-logger/tsconfig.lib.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../../dist/out-tsc",
    "declaration": true,
    "types": ["node"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]
}
"
`;

exports[`logger generator should generate the logger: custom/test-logger/tsconfig.spec.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../../dist/out-tsc",
    "module": "commonjs",
    "moduleResolution": "node10",
    "types": ["jest", "node"]
  },
  "include": [
    "jest.config.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
"
`;

exports[`logger generator should generate the logger: jest.config.ts 1`] = `
"import type { Config } from 'jest';
import { getJestProjectsAsync } from '@nx/jest';

export default async (): Promise<Config> => ({
  projects: await getJestProjectsAsync(),
});
"
`;

exports[`logger generator should generate the logger: jest.preset.js 1`] = `
"const nxPreset = require('@nx/jest/preset').default;

module.exports = { ...nxPreset };
"
`;
