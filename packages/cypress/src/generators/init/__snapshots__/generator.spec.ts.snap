// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should run successfully with default options should move the tsconfig.cy.json into the cypress directory and configure it has configured the new tsconfig.json within the cypress directory: apps/application-e2e/src/tsconfig.json 1`] = `
"{
  "extends": "../tsconfig.json",
  "compilerOptions": {
    "allowJs": true,
    "outDir": "../../dist/out-tsc",
    "module": "commonjs",
    "types": ["cypress", "node"],
    "sourceMap": false
  },
  "include": [
    "**/*.ts",
    "**/*.js",
    "../cypress.config.ts",
    "../**/*.cy.ts",
    "../**/*.cy.js",
    "../**/*.d.ts"
  ],
  "exclude": ["cypress/**/**", "cypress.config.ts"]
}
"
`;

exports[`should run successfully with default options should set up the example files: apps/application-e2e/src/fixtures/example.json 1`] = `
"{
  "name": "Using fixtures to represent data",
  "email": "hello@cypress.io",
  "body": "Fixtures are a great way to mock data for responses to routes"
}
"
`;

exports[`should run successfully with default options should set up the example files: apps/application-e2e/src/support/commands.ts 1`] = `
"declare namespace Cypress {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  interface Chainable<Subject> {
    login(email: string, password: string): void;
  }
}

// -- This is a parent command --
Cypress.Commands.add('login', (email, password) => {
  console.log('Custom command example: Login', email, password);
});
//
// -- This is a child command --
// Cypress.Commands.add("drag", { prevSubject: 'element'}, (subject, options) => { ... })
//
//
// -- This is a dual command --
// Cypress.Commands.add("dismiss", { prevSubject: 'optional'}, (subject, options) => { ... })
//
//
// -- This will overwrite an existing command --
// Cypress.Commands.overwrite("visit", (originalFn, url, options) => { ... })
"
`;

exports[`should run successfully with default options should update the project cypress config: apps/application-e2e/cypress.config.ts 1`] = `
"import { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';

import { defineConfig } from 'cypress';

const appName = process.env.NX_TASK_TARGET_PROJECT as string;
const outputFolderForProject = process.env.CI
  ? \`../../test-results/\${appName}\`
  : 'test-results';

export default defineConfig({
  e2e: { ...nxE2EPreset(__filename, { cypressDir: 'src' }) },
  reporter: '../../node_modules/cypress-multi-reporters',
  reporterOptions: {
    reporterEnabled: !process.env.CI
      ? 'spec'
      : 'spec, mocha-junit-reporter, mochawesome',
    mochaJunitReporterReporterOptions: {
      mochaFile: outputFolderForProject.concat(
        \`/downloads/junit-report/results-\${appName}-[hash].xml\`
      ),
    },
    mochawesomeReporterOptions: {
      charts: true,
      overwrite: false,
      html: false,
      json: true,
      reportDir: outputFolderForProject.concat('/downloads/reports-json-file'),
      reportFilename: '[name].html',
      embeddedScreenshots: true,
      inlineAssets: true,
    },
  },
});
"
`;

exports[`should run successfully with default options should update the support e2e file: apps/application-e2e/src/support/e2e.ts 1`] = `
"import './commands';
"
`;