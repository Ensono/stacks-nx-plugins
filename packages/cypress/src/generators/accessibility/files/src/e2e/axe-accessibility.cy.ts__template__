import 'cypress-axe';
import { terminalLogAxe } from '../support/e2e';
// Basic usage

describe('@accessibility-tests', () => {
  beforeEach(() => {
    cy.visit('/');
    cy.injectAxe();
  });

  it('Has no detectable a11y violations on load (with custom parameters)', () => {
    // Test the page at initial load (with context and options)
    cy.checkA11y(
      undefined,
      {
        runOnly: {
          type: 'tag',
          values: ['wcag2a'],
        },
      },
      terminalLogAxe
    );
  });

  it('Has no detectable a11y violations on load (filtering to only include critical impact violations)', () => {
    // Test on initial load, only report and assert for critical impact items
    cy.checkA11y(
      undefined,
      {
        includedImpacts: ['critical'],
      },
      terminalLogAxe
    );
  });

  // Basic usage after interacting with the page
  it('Has no a11y violations after button click', () => {
    // Interact with the page, then check for a11y issues
    cy.contains('a', "What's next?").click();
    cy.checkA11y(undefined, undefined, terminalLogAxe);
  });

  it('Only logs a11y violations while allowing the test to pass', () => {
    // Do not fail the test when there are accessibility failures
    cy.checkA11y(undefined, undefined, terminalLogAxe, true);
  });

  it('Has no a11y violations after asynchronous load', () => {
    // Retry the check if there are initial failures
    cy.checkA11y(
      undefined,
      {
        retries: 3,
        interval: 100,
      },
      terminalLogAxe
    );
  });
});
