// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`playwright generator should run successfully with default options: playwright.config.base.ts 1`] = `
"import { PlaywrightTestConfig } from '@playwright/test';

const appName = process.env.NX_TASK_TARGET_PROJECT as string;
const outputFolderForProject = process.env.CI
  ? \`../../test-results/\${appName}\`
  : 'test-results';
const baseURL = process.env.BASE_URL || 'http://localhost:4200/';

export const baseConfig: PlaywrightTestConfig = {
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : undefined,
  maxFailures: process.env.CI ? 10 : undefined,
  timeout: 30000,
  outputDir: outputFolderForProject,
  reporter: process.env.CI
    ? [
        ['dot'],
        [
          'html',
          {
            open: 'never',
            outputFolder: outputFolderForProject.concat('/html-report'),
          },
        ],
        [
          'junit',
          { outputFile: outputFolderForProject.concat('/', appName, '.xml') },
        ],
      ]
    : 'list',
  use: { baseURL },
};
"
`;

exports[`playwright generator should run successfully with default options: test-e2e/.eslintrc.json 1`] = `
"{
  "extends": ["../.eslintrc.json"],
  "ignorePatterns": ["!**/*"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "jest/no-done-callback": "off"
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "jest/no-done-callback": "off"
      }
    },
    {
      "files": ["*.js", "*.jsx"],
      "rules": {}
    }
  ]
}
"
`;

exports[`playwright generator should run successfully with default options: test-e2e/playwright.config.ts 1`] = `
"import { devices, PlaywrightTestConfig } from '@playwright/test';

import { baseConfig } from '../../playwright.config.base';

const config: PlaywrightTestConfig = {
  ...baseConfig,
  use: {
    ...baseConfig.use,
    screenshot: 'only-on-failure',
    trace: 'retain-on-failure',
  },
  projects: [
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
      },
    },
    {
      name: 'firefox',
      use: {
        ...devices['Desktop Firefox'],
      },
    },

    {
      name: 'webkit',
      use: {
        ...devices['Desktop Safari'],
      },
    },

    /* Test against mobile viewports. */
    {
      name: 'Mobile Chrome',
      use: {
        ...devices['Pixel 5'],
      },
    },
    {
      name: 'Mobile Safari',
      use: {
        ...devices['iPhone 12'],
      },
    },
  ],
};

export default config;
"
`;

exports[`playwright generator should run successfully with default options: test-e2e/project.json 1`] = `
"{
  "name": "test-e2e",
  "$schema": "../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "./test-e2e/src",
  "projectType": "application",
  "targets": {
    "e2e": {
      "executor": "@mands/nx-playwright:playwright-executor",
      "options": {
        "e2eFolder": "./test-e2e",
        "devServerTarget": "test:serve",
        "packageRunner": "npx"
      },
      "configurations": {
        "production": {
          "devServerTarget": "test:serve:production"
        }
      }
    },
    "ts-check": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          {
            "command": "tsc --build --force --verbose apps/test-e2e/tsconfig.json"
          }
        ]
      }
    },
    "lint": {
      "executor": "@nx/linter:eslint",
      "outputs": ["{options.outputFile}"],
      "options": {
        "lintFilePatterns": ["./test-e2e/**/*.{ts,tsx,js,jsx}"]
      }
    }
  },
  "tags": [],
  "implicitDependencies": ["test"]
}
"
`;

exports[`playwright generator should run successfully with default options: test-e2e/src/example.spec.ts 1`] = `
"import { test, expect } from '@playwright/test';

// An example test using Playwright
// Configuration such as the applications BASE URL is automatically configured / declared in the playwright.config.ts file

type AppStatus = string | null;

test.describe('Playwright example tests @example-playwright', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
  });

  test('clicking whats next should take the user to the next steps part of the page', async ({
    page,
  }) => {
    await page.locator('a:has-text("What\\'s next?")').click();
    expect(page.url()).toContain('#commands');
  });

  test('App should be up and running', async ({ page }) => {
    const status: AppStatus = await page.locator('#hero >> span').textContent();
    expect(status).toBe("You're up and running");
  });

  test('App should have 5 learning materials', async ({ page }) => {
    expect((await page.locator('#learning-materials').count()) === 5);
  });

  test('NX logo should be hidden on mobile', async ({ page, isMobile }) => {
    test.skip(!isMobile, 'Test only required for mobile');
    const container = page.locator('.logo-container');
    const display = await container.evaluate((element) => {
      return window.getComputedStyle(element).getPropertyValue('display');
    });
    expect(display).toBe('none');
  });

  test('NX logo should be visible on desktop', async ({ page, isMobile }) => {
    test.skip(isMobile, 'Test only required for desktop');
    const container = page.locator('.logo-container');
    const display = await container.evaluate((element) => {
      return window.getComputedStyle(element).getPropertyValue('display');
    });
    expect(display).toBe('flex');
  });
});
"
`;

exports[`playwright generator should run successfully with default options: test-e2e/tsconfig.e2e.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "sourceMap": false,
    "outDir": "../dist/out-tsc",
    "allowJs": true,
    "types": ["jest", "node"]
  },
  "include": ["**/*.ts", "**/*.js"]
}
"
`;

exports[`playwright generator should run successfully with default options: test-e2e/tsconfig.json 1`] = `
"{
  "extends": "../tsconfig.base.json",
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.e2e.json"
    }
  ],
  "compilerOptions": {
    "lib": ["dom"]
  }
}
"
`;
