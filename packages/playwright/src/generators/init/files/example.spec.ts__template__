import { test, expect } from '@playwright/test';

// An example test using Playwright
// Configuration such as the applications BASE URL is automatically configured / declared in the playwright.config.ts file

type AppStatus = string | null;

test.describe('Playwright example tests @example-playwright', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
  });

  test('clicking whats next should take the user to the next steps part of the page', async ({
    page,
  }) => {
    await page.locator('a:has-text("What\'s next?")').click();
    expect(page.url()).toContain('#commands');
  });

  test('App should be up and running', async ({ page }) => {
    const status: AppStatus = await page.locator('#hero >> span').textContent();
    expect(status).toBe("You're up and running");
  });

  test('App should have 5 learning materials', async ({ page }) => {
    expect((await page.locator('#learning-materials').count()) === 5);
  });

  test('NX logo should be hidden on mobile', async ({ page, isMobile }) => {
    test.skip(!isMobile, 'Test only required for mobile');
    const container = page.locator('.logo-container');
    const display = await container.evaluate((element) => {
      return window.getComputedStyle(element).getPropertyValue('display');
    });
    expect(display).toBe('none');
  });

  test('NX logo should be visible on desktop', async ({ page, isMobile }) => {
    test.skip(isMobile, 'Test only required for desktop');
    const container = page.locator('.logo-container');
    const display = await container.evaluate((element) => {
      return window.getComputedStyle(element).getPropertyValue('display');
    });
    expect(display).toBe('flex');
  });
});
