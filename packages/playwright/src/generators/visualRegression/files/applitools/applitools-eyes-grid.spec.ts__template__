// Applitools requires an API key (APPLITOOLS_API_KEY) to function
// See: https://applitools.com/tutorials/guides/getting-started/registering-an-account#retrieving-your-api-key

import {
  BatchInfo,
  Configuration,
  VisualGridRunner,
  BrowserType,
  DeviceName,
  ScreenOrientation,
  Eyes,
  Target,
} from '@applitools/eyes-playwright';
import { test } from '@playwright/test';

let Config: Configuration;
let Runner: VisualGridRunner;

// This method sets up the configuration for running visual tests in the Ultrafast Grid.
// The configuration is shared by all tests in a test suite, so it belongs in a `beforeAll` method.
// If you have more than one test class, then you should abstract this configuration to avoid duplication.
test.beforeAll(async () => {
  // Concurrency refers to the number of visual checkpoints Applitools will perform in parallel.
  // Warning: If you have a free account, then concurrency will be limited to 1.
  Runner = new VisualGridRunner({ testConcurrency: 5 });

  // Create a new batch for tests.
  // A batch is the collection of visual checkpoints for a test suite.
  // Batches are displayed in the dashboard, so use meaningful names.
  const Batch = new BatchInfo({
    name: 'Example: Playwright TypeScript with the Ultrafast Grid',
  });

  // Create a configuration for Applitools Eyes.
  Config = new Configuration();

  // Set the batch for the config.
  Config.setBatch(Batch);

  // Add desktop browsers with different viewports for cross-browser testing in the Ultrafast Grid.
  Config.addBrowser(1920, 1080, BrowserType.CHROME);
  // Config.addBrowser(1366, 768, BrowserType.FIREFOX);
  // Config.addBrowser(3840, 2160, BrowserType.SAFARI);

  // Add mobile emulation devices with different orientations for cross-browser testing in the Ultrafast Grid.
  Config.addDeviceEmulation(
    DeviceName.iPhone_11_Pro_Max,
    ScreenOrientation.LANDSCAPE
  );
  // Config.addDeviceEmulation(DeviceName.Galaxy_S22, ScreenOrientation.PORTRAIT);
});

// This "describe" method contains related test cases with per-test setup and cleanup.
// In this example, there is only one test.
test.describe('Applitools-eyes - ultrafast grid - @visual-regression', () => {
  let eyes: Eyes;

  // This method sets up each test with its own Applitools Eyes object.
  test.beforeEach(async ({ page }) => {
    // Navigate to the base page of the NextJs app
    await page.goto('/');
    // Create the Applitools Eyes object connected to the VisualGridRunner and set its configuration.
    eyes = new Eyes(Runner, Config);

    // Open Eyes to start visual testing.
    // Each test should open its own Eyes for its own snapshots.
    // It is a recommended practice to set all four inputs below:
    // eslint-disable-next-line security/detect-non-literal-fs-filename
    await eyes.open(
      page, // The Playwright page object to "watch"
      'next-js-app', // The name of the app under test
      test.info().title, // The name of the test case
      { width: 1920, height: 1080 } // The viewport size for the local browser
    );
  });

  // This test covers performs a simple visual regression test, capturing/comparing a screenshot of the full window.
  // If the page ever changes, then Applitools will detect the changes and highlight them in the dashboard.
  test('Check the main page', async () => {
    // This snapshot uses STRICT match level to verify that the page content matches the baseline image closely enough that the human eye would not see any difference.
    await eyes.check('Main page', Target.window().fully().strict());
  });

  test.afterEach(async () => {
    // Close Eyes to tell the server it should display the results.
    await eyes.close();
  });
});

test.afterAll(async () => {
  // Close the batch and report visual differences to the console.
  // Note that it forces Playwright to wait synchronously for all visual checkpoints to complete.
  // If any visual regressions are detected, the playwright test will fail
  const results = await Runner.getAllTestResults();
  console.log('Visual test results', results);
});